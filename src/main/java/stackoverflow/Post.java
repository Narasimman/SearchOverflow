package stackoverflow;/** * This class represents a Post on Stack Overflow website *  * @author Narasimman *  */public class Post {  private final int id;  private final String title;  private final String body;  private final int acceptedAnswerId;  private final int score;  private final int viewCount;  private final int favoriteCount;  private final int answerCount;  private final double luceneScore;  private Answer answer;  private double finalScore;  private Post(PostBuilder builder) {    this.id = builder.id;    this.title = builder.title;    this.body = builder.body;    this.acceptedAnswerId = builder.acceptedAnswerId;    this.score = builder.score;    this.viewCount = builder.viewCount;    this.answerCount = builder.answerCount;    this.favoriteCount = builder.favoriteCount;    this.luceneScore = builder.luceneScore;  }  /**   * Post builder to build objects with necessary items   *    * @author Narasimman   *    */  public static class PostBuilder {    private int id;    private String title;    private String body;    private int acceptedAnswerId;    private int score;    private double luceneScore;    private int answerCount;    private int viewCount;    private int favoriteCount;    public PostBuilder(int id) {      if (id == 0) {        throw new IllegalArgumentException("Invalid Id");      }      this.id = id;    }    public PostBuilder title(String title) {      this.title = title;      return this;    }    public PostBuilder body(String body) {      this.body = body;      return this;    }    public PostBuilder acceptedAnswerId(int aId) {      this.acceptedAnswerId = aId;      return this;    }    public PostBuilder score(int score) {      this.score = score;      return this;    }    public PostBuilder luceneScore(double score) {      this.luceneScore = score;      return this;    }    public PostBuilder answerCount(int count) {      this.answerCount = count;      return this;    }    public PostBuilder viewCount(int vc) {      this.viewCount = vc;      return this;    }    public PostBuilder favoriteCount(int fav) {      this.favoriteCount = fav;      return this;    }    public Post build() {      return new Post(this);    }  }  public int getId() {    return id;  }  public String getTitle() {    return title;  }  public String getBody() {    return body;  }  public int getAcceptedAnswerId() {    return acceptedAnswerId;  }  public int getAnswerCount() {    return answerCount;  }  public int getScore() {    return score;  }  public int getViewCount() {    return viewCount;  }  public int getFavoriteCount() {    return favoriteCount;  }  public double getWeightScore() {    return (score * favoriteCount) / viewCount;  }  public Answer getAnswer() {    return answer;  }  public void setAnswer(Answer ans) {    this.answer = ans;  }  public double getFinalScore() {    return finalScore;  }  public void setFinalScore(double finalScore) {    this.finalScore = luceneScore + finalScore;  }  public double getLuceneScore() {    return luceneScore;  }  @Override  public String toString() {    return "Post [id=" + id + ", title=" + title + ", body=" + body        + ", acceptedAnswerId=" + acceptedAnswerId + ", score=" + score        + ", viewCount=" + viewCount + ", favoriteCount=" + favoriteCount        + ", answerCount=" + answerCount + ", luceneScore=" + luceneScore        + ", ans=" + answer + ", finalScore=" + finalScore + "]";  }  @Override  public int hashCode() {    final int prime = 31;    int result = 1;    result = prime * result + acceptedAnswerId;    result = prime * result + ((answer == null) ? 0 : answer.hashCode());    result = prime * result + answerCount;    result = prime * result + ((body == null) ? 0 : body.hashCode());    result = prime * result + favoriteCount;    long temp;    temp = Double.doubleToLongBits(finalScore);    result = prime * result + (int) (temp ^ (temp >>> 32));    result = prime * result + id;    temp = Double.doubleToLongBits(luceneScore);    result = prime * result + (int) (temp ^ (temp >>> 32));    result = prime * result + score;    result = prime * result + ((title == null) ? 0 : title.hashCode());    result = prime * result + viewCount;    return result;  }  @Override  public boolean equals(Object obj) {    if (this == obj) {      return true;    }    if (obj == null) {      return false;    }    if (!(obj instanceof Post)) {      return false;    }    Post other = (Post) obj;    if (acceptedAnswerId != other.acceptedAnswerId) {      return false;    }    if (answer == null) {      if (other.answer != null) {        return false;      }    } else if (!answer.equals(other.answer)) {      return false;    }    if (answerCount != other.answerCount) {      return false;    }    if (body == null) {      if (other.body != null) {        return false;      }    } else if (!body.equals(other.body)) {      return false;    }    if (favoriteCount != other.favoriteCount) {      return false;    }    if (Double.doubleToLongBits(finalScore) != Double        .doubleToLongBits(other.finalScore)) {      return false;    }    if (id != other.id) {      return false;    }    if (Double.doubleToLongBits(luceneScore) != Double        .doubleToLongBits(other.luceneScore)) {      return false;    }    if (score != other.score) {      return false;    }    if (title == null) {      if (other.title != null) {        return false;      }    } else if (!title.equals(other.title)) {      return false;    }    if (viewCount != other.viewCount) {      return false;    }    return true;  }}